% Use this to test the dataset generated by other means
% for the dataset in testscript.mat
% Testscript1.mat contains data s.t. w vector is a constant vector
% Testscript2.mat contains data s.t. w belongs to -20,20
% Testscript3.mat contains data s.t. w belongs to -1,1
% Testscript4.mat contains data for Xs = Xt

clear all;
load('testscript4.mat');

p = 0;
c = 1;
c2 = 1; % sigma squared
lam = 1;
lamr = 0;
eta = 0.5;
batch_tr = round(size(xtrain,1)/35);
batch_te = round(size(xtestL,1)/35);

addpath('../../libsvm-3.21/matlab');
w = 0*ones(size(xtrain,2),1);
% w = w2 - w1;
store(:,1) = w;

for i=1:500

p = p + 1;
    ynew = ytrain + xtrain*w;
    %ynew = mean_std(ynew);
    X = [xtrain;xtestL];
    Y = [ynew;ytestL];
    
%     X = mean_std(X);
%     Y = mean_std(Y);
%     xtestU = mean_std(xtestU);
%     ytestU = mean_std(ytestU);
        
    svm_model = svmtrain(Y,X,'-s 4');
    svm_model_base = svmtrain(ytestL,xtestL,'-s 4');
    [Tpred(:,p),Taccuracy(:,p),~] = svmpredict(Y, X, svm_model);
    [pred_base(:,p),accuracy_base(:,p),~] = svmpredict(ytestU, xtestU, svm_model_base);
    [pred(:,p),accuracy(:,p),~] = svmpredict(ytestU, xtestU, svm_model);
    loss;L(:,p) = lossv;
    lossv
    
    % SGD Below    
    
    indices_te = randperm(size(xtestL,1));
    xtestLs = xtestL(indices_te(1:batch_te),:);
    ytestLs = ytestL(indices_te(1:batch_te),:);
    
    indices_tr = randperm(size(xtrain,1));
    xtrains = xtrain(indices_tr(1:batch_tr),:);
    ytrains = ytrain(indices_tr(1:batch_tr),:);
    
    ynews = ynew(indices_tr(1:batch_tr),:);
    
    Ltr = kernel(xtrains,xtrains,c,c2);
    Ltr2 = inv(Ltr+lam*eye(size(xtrains,1)));
    Lte = kernel(xtestLs,xtestLs,c,c2);
    Ltetr = kernel(xtestLs,xtrains,c,c2);
    Lte2 = inv(Lte+lam*eye(size(xtestLs,1)));
    
    %%%% Updating w and b
    for k = 1:size(w,1)
        
        L_sgd(:,p) = trace(Ltr2*kernel(ynews,ynews,c,c2)*Ltr2*Ltr) - 2*trace(Ltr2*kernel(ynews,ytestLs,c,c2)*Lte2*kernel(xtestLs,xtrains,c,c2));
        
        % first expression
        for i = 1:size(ynews,1)
            for j = 1:size(ynews,1)
                %d_w(i,j) = (-1/c2)*(ynews(i) - ynews(j))*(I(i,k) - I(j,k));
                % Changing I over here
                d_w(i,j) = (-1/c2)*(ynews(i) - ynews(j))*(xtrains(i,k) - xtrains(j,k));
            end
        end
        dl_dk = Ltr2*Ltr'*Ltr2;
        w(k) = w(k)+ eta*trace(dl_dk'*[kernel(ynews,ynews,c,c2).*(d_w)]);
        
        % Second expression
        for i = 1:size(ynews,1)
            for j = 1:size(ytestLs,1)
                % ep_w(i,j) = (-1/c2)*(ynews(i) - ytestLs(j))*I(i,k);
                % Changing the I function
                ep_w(i,j) = (-1/c2)*(ynews(i) - ytestLs(j))*xtrains(i,k);
            end
        end
        dl_dk2 = 2*Ltr2*Ltetr'*Lte2;
        w(k) = w(k) + eta*trace(dl_dk2'*[kernel(ynews,ytestLs,c,c2).*ep_w]);
    end
    w = w + lamr*2*w;

    storew(:,p) = w;
    
    
end
w
figure(1);
subplot(3,1,1);
plot(L(1,1:end),'-*');
subplot(3,1,2);
plot(Taccuracy(2,1:end),'-*');
subplot(3,1,3);
plot(accuracy(2,1:end),'-*');